// Code generated by github.com/hasura/ndc-sdk-go/cmd/hasura-ndc-go, DO NOT EDIT.
package api

import (
	"github.com/hasura/ndc-sdk-go/schema"
)

func toPtr[V any](value V) *V {
	return &value
}

// GetConnectorSchema gets the generated connector schema
func GetConnectorSchema() *schema.SchemaResponse {
	return &schema.SchemaResponse{
		Collections: []schema.CollectionInfo{},
		ObjectTypes: schema.SchemaResponseObjectTypes{
			"ActiveTarget": schema.ObjectType{
				Fields: schema.ObjectTypeFields{
					"discoveredLabels": schema.ObjectField{
						Type: schema.NewNamedType("JSON").Encode(),
					},
					"globalUrl": schema.ObjectField{
						Type: schema.NewNamedType("String").Encode(),
					},
					"health": schema.ObjectField{
						Type: schema.NewNamedType("String").Encode(),
					},
					"labels": schema.ObjectField{
						Type: schema.NewNamedType("JSON").Encode(),
					},
					"lastError": schema.ObjectField{
						Type: schema.NewNamedType("String").Encode(),
					},
					"lastScrape": schema.ObjectField{
						Type: schema.NewNamedType("TimestampTZ").Encode(),
					},
					"lastScrapeDuration": schema.ObjectField{
						Type: schema.NewNamedType("Float64").Encode(),
					},
					"scrapePool": schema.ObjectField{
						Type: schema.NewNamedType("String").Encode(),
					},
					"scrapeUrl": schema.ObjectField{
						Type: schema.NewNamedType("String").Encode(),
					},
				},
				ForeignKeys: schema.ObjectTypeForeignKeys{},
			},
			"Alert": schema.ObjectType{
				Description: toPtr("models an active alert."),
				Fields: schema.ObjectTypeFields{
					"active_at": schema.ObjectField{
						Type: schema.NewNamedType("TimestampTZ").Encode(),
					},
					"annotations": schema.ObjectField{
						Type: schema.NewNamedType("JSON").Encode(),
					},
					"labels": schema.ObjectField{
						Type: schema.NewNamedType("JSON").Encode(),
					},
					"state": schema.ObjectField{
						Type: schema.NewNamedType("AlertState").Encode(),
					},
					"value": schema.ObjectField{
						Type: schema.NewNamedType("Decimal").Encode(),
					},
				},
				ForeignKeys: schema.ObjectTypeForeignKeys{},
			},
			"AlertManager": schema.ObjectType{
				Fields: schema.ObjectTypeFields{
					"url": schema.ObjectField{
						Type: schema.NewNamedType("String").Encode(),
					},
				},
				ForeignKeys: schema.ObjectTypeForeignKeys{},
			},
			"AlertManagersResult": schema.ObjectType{
				Fields: schema.ObjectTypeFields{
					"activeAlertManagers": schema.ObjectField{
						Type: schema.NewArrayType(schema.NewNamedType("AlertManager")).Encode(),
					},
					"droppedAlertManagers": schema.ObjectField{
						Type: schema.NewArrayType(schema.NewNamedType("AlertManager")).Encode(),
					},
				},
				ForeignKeys: schema.ObjectTypeForeignKeys{},
			},
			"DroppedTarget": schema.ObjectType{
				Fields: schema.ObjectTypeFields{
					"discoveredLabels": schema.ObjectField{
						Type: schema.NewNamedType("JSON").Encode(),
					},
				},
				ForeignKeys: schema.ObjectTypeForeignKeys{},
			},
			"MetricMetadata": schema.ObjectType{
				Fields: schema.ObjectTypeFields{
					"help": schema.ObjectField{
						Type: schema.NewNamedType("String").Encode(),
					},
					"metric": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"target": schema.ObjectField{
						Type: schema.NewNamedType("JSON").Encode(),
					},
					"type": schema.ObjectField{
						Type: schema.NewNamedType("String").Encode(),
					},
					"unit": schema.ObjectField{
						Type: schema.NewNamedType("String").Encode(),
					},
				},
				ForeignKeys: schema.ObjectTypeForeignKeys{},
			},
			"PrometheusSeriesArguments": schema.ObjectType{
				Description: toPtr("common api arguments for the prometheus series and labels functions."),
				Fields: schema.ObjectTypeFields{
					"end": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("TimestampTZ")).Encode(),
					},
					"limit": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Int64")).Encode(),
					},
					"match": schema.ObjectField{
						Type: schema.NewArrayType(schema.NewNamedType("String")).Encode(),
					},
					"start": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("TimestampTZ")).Encode(),
					},
				},
				ForeignKeys: schema.ObjectTypeForeignKeys{},
			},
			"RuleGroup": schema.ObjectType{
				Fields: schema.ObjectTypeFields{
					"file": schema.ObjectField{
						Type: schema.NewNamedType("String").Encode(),
					},
					"interval": schema.ObjectField{
						Type: schema.NewNamedType("Float64").Encode(),
					},
					"name": schema.ObjectField{
						Type: schema.NewNamedType("String").Encode(),
					},
					"rules": schema.ObjectField{
						Type: schema.NewArrayType(schema.NewNamedType("JSON")).Encode(),
					},
				},
				ForeignKeys: schema.ObjectTypeForeignKeys{},
			},
			"RulesResult": schema.ObjectType{
				Fields: schema.ObjectTypeFields{
					"groups": schema.ObjectField{
						Type: schema.NewArrayType(schema.NewNamedType("RuleGroup")).Encode(),
					},
				},
				ForeignKeys: schema.ObjectTypeForeignKeys{},
			},
			"TargetsResult": schema.ObjectType{
				Fields: schema.ObjectTypeFields{
					"activeTargets": schema.ObjectField{
						Type: schema.NewArrayType(schema.NewNamedType("ActiveTarget")).Encode(),
					},
					"droppedTargets": schema.ObjectField{
						Type: schema.NewArrayType(schema.NewNamedType("DroppedTarget")).Encode(),
					},
				},
				ForeignKeys: schema.ObjectTypeForeignKeys{},
			},
		},
		Functions: []schema.FunctionInfo{
			{
				Name:        "prometheus_alertmanagers",
				Description: toPtr("return an overview of the current state of the Prometheus alertmanager discovery."),
				ResultType:  schema.NewNamedType("AlertManagersResult").Encode(),
				Arguments:   map[string]schema.ArgumentInfo{},
			},
			{
				Name:       "prometheus_alerts",
				ResultType: schema.NewArrayType(schema.NewNamedType("Alert")).Encode(),
				Arguments:  map[string]schema.ArgumentInfo{},
			},
			{
				Name:        "prometheus_label_names",
				Description: toPtr("return a list of label names."),
				ResultType:  schema.NewArrayType(schema.NewNamedType("String")).Encode(),
				Arguments: map[string]schema.ArgumentInfo{
					"end": {
						Type: schema.NewNullableType(schema.NewNamedType("TimestampTZ")).Encode(),
					},
					"limit": {
						Type: schema.NewNullableType(schema.NewNamedType("Int64")).Encode(),
					},
					"match": {
						Type: schema.NewArrayType(schema.NewNamedType("String")).Encode(),
					},
					"start": {
						Type: schema.NewNullableType(schema.NewNamedType("TimestampTZ")).Encode(),
					},
				},
			},
			{
				Name:        "prometheus_label_values",
				Description: toPtr("return a list of label values for a provided label name."),
				ResultType:  schema.NewArrayType(schema.NewNamedType("String")).Encode(),
				Arguments: map[string]schema.ArgumentInfo{
					"end": {
						Type: schema.NewNullableType(schema.NewNamedType("TimestampTZ")).Encode(),
					},
					"label_name": {
						Type: schema.NewNamedType("String").Encode(),
					},
					"limit": {
						Type: schema.NewNullableType(schema.NewNamedType("Int64")).Encode(),
					},
					"match": {
						Type: schema.NewArrayType(schema.NewNamedType("String")).Encode(),
					},
					"start": {
						Type: schema.NewNullableType(schema.NewNamedType("TimestampTZ")).Encode(),
					},
				},
			},
			{
				Name:        "prometheus_rules",
				Description: toPtr("return a list of all active alerts."),
				ResultType:  schema.NewNamedType("RulesResult").Encode(),
				Arguments:   map[string]schema.ArgumentInfo{},
			},
			{
				Name:        "prometheus_series",
				Description: toPtr("find series by label matchers."),
				ResultType:  schema.NewArrayType(schema.NewNamedType("JSON")).Encode(),
				Arguments: map[string]schema.ArgumentInfo{
					"end": {
						Type: schema.NewNullableType(schema.NewNamedType("TimestampTZ")).Encode(),
					},
					"limit": {
						Type: schema.NewNullableType(schema.NewNamedType("Int64")).Encode(),
					},
					"match": {
						Type: schema.NewArrayType(schema.NewNamedType("String")).Encode(),
					},
					"start": {
						Type: schema.NewNullableType(schema.NewNamedType("TimestampTZ")).Encode(),
					},
				},
			},
			{
				Name:        "prometheus_targets",
				Description: toPtr("returns an overview of the current state of the Prometheus target discovery."),
				ResultType:  schema.NewNamedType("TargetsResult").Encode(),
				Arguments:   map[string]schema.ArgumentInfo{},
			},
			{
				Name:        "prometheus_targets_metadata",
				Description: toPtr("returns metadata about metrics currently scraped from targets."),
				ResultType:  schema.NewArrayType(schema.NewNamedType("MetricMetadata")).Encode(),
				Arguments: map[string]schema.ArgumentInfo{
					"limit": {
						Type: schema.NewNullableType(schema.NewNamedType("Int64")).Encode(),
					},
					"match_target": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"metric": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
				},
			},
		},
		Procedures: []schema.ProcedureInfo{},
		ScalarTypes: schema.SchemaResponseScalarTypes{
			"AlertState": schema.ScalarType{
				AggregateFunctions:  schema.ScalarTypeAggregateFunctions{},
				ComparisonOperators: map[string]schema.ComparisonOperatorDefinition{},
				Representation:      schema.NewTypeRepresentationEnum([]string{"firing", "inactive", "pending"}).Encode(),
			},
			"Decimal": schema.ScalarType{
				AggregateFunctions:  schema.ScalarTypeAggregateFunctions{},
				ComparisonOperators: map[string]schema.ComparisonOperatorDefinition{},
				Representation:      schema.NewTypeRepresentationString().Encode(),
			},
			"Float64": schema.ScalarType{
				AggregateFunctions:  schema.ScalarTypeAggregateFunctions{},
				ComparisonOperators: map[string]schema.ComparisonOperatorDefinition{},
				Representation:      schema.NewTypeRepresentationFloat64().Encode(),
			},
			"Int64": schema.ScalarType{
				AggregateFunctions:  schema.ScalarTypeAggregateFunctions{},
				ComparisonOperators: map[string]schema.ComparisonOperatorDefinition{},
				Representation:      schema.NewTypeRepresentationInt64().Encode(),
			},
			"JSON": schema.ScalarType{
				AggregateFunctions:  schema.ScalarTypeAggregateFunctions{},
				ComparisonOperators: map[string]schema.ComparisonOperatorDefinition{},
				Representation:      schema.NewTypeRepresentationJSON().Encode(),
			},
			"String": schema.ScalarType{
				AggregateFunctions:  schema.ScalarTypeAggregateFunctions{},
				ComparisonOperators: map[string]schema.ComparisonOperatorDefinition{},
				Representation:      schema.NewTypeRepresentationString().Encode(),
			},
			"TimestampTZ": schema.ScalarType{
				AggregateFunctions:  schema.ScalarTypeAggregateFunctions{},
				ComparisonOperators: map[string]schema.ComparisonOperatorDefinition{},
				Representation:      schema.NewTypeRepresentationTimestampTZ().Encode(),
			},
		},
	}
}
